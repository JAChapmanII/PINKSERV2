#include "brain.hpp"

template<typename K, typename V> Dictionary<K, V>::Dictionary() :
		m_fmap(), m_rmap() {
}

template<typename K, typename V> V Dictionary<K, V>::get(K key) {
	auto it = this->m_fmap.find(key);
	if(it == this->m_fmap.end()) {
		V value = this->m_fmap.size() + 1;
		this->m_fmap[key] = value;
		this->m_rmap[value] = key;
		return value + AnchorCount;
	}
	return it->second + AnchorCount;
}
template<typename K, typename V> V Dictionary<K, V>::operator[](K key) {
	return this->get(key);
}

template<typename K, typename V> K Dictionary<K, V>::get(V value) {
	return this->m_rmap[value - AnchorCount];
}
template<typename K, typename V> K Dictionary<K, V>::operator[](V value) {
	return this->get(value);
}

template<typename K, typename V> std::istream &Dictionary<K, V>::read(std::istream &in) {
	brain::read(in, this->m_fmap);
	return brain::read(in, this->m_rmap);
}
template<typename K, typename V> std::ostream &Dictionary<K, V>::write(std::ostream &out) {
	brain::write(out, this->m_fmap);
	return brain::write(out, this->m_rmap);
}

template<typename K, typename V> unsigned Dictionary<K, V>::size() const {
	return this->m_fmap.size();
}

// vim: ft=cpp:
