#include <sstream>

template<typename T, typename F>
		std::vector<T> util::filter(std::vector<T> vec, F func) {
	std::vector<T> res;
	for(auto i : vec)
		if(func(i))
			res.push_back(i);
	return res;
}

template<typename T> T util::fromString(std::string str) {
	std::stringstream ss(str);
	T result;
	ss >> result;
	return result;
}
template<typename T> std::string util::asString(T val) {
	std::stringstream ss;
	ss << val;
	return ss.str();
}

template<typename T> bool
		util::contains(std::vector<T> vec, T val) { // {{{
	return (find(vec.begin(), vec.end(), val) != vec.end());
} // }}}
template<typename K, typename V> bool
		util::contains(std::map<K, V> map, K key) { // {{{
	return (map.find(key) != map.end());
} // }}}


// vim: ft=cpp:
